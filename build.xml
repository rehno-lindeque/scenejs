<project name="SceneJS2.0.0" basedir="." default="package">

    <property name="BUILD_MAJOR" value="2"/>
    <property name="BUILD_MINOR" value="0"/>
    <property name="BUILD_ID" value="0"/>
    <property name="PATCH_ID" value="0"/>

    <property name="LIB_DIR" location="${basedir}/lib"/>
    <property name="SRC_DIR" location="${basedir}/src"/>
    <property name="SceneJS._JS_NAME" value="scenejs.js"/>
    <property name="SceneJS._MIN_JS_NAME" value="scenejs.min.js"/>


    <echo>************** Building SceneJS Version ${BUILD_MAJOR}.${BUILD_MINOR}.${BUILD_ID}.${PATCH_ID}</echo>

    <property name="DIST_CONTAINER_DIR" location="${basedir}/dist"/>

    <property name="SceneJS._NAME" value="scenejs-${BUILD_MAJOR}.${BUILD_MINOR}.${BUILD_ID}.${PATCH_ID}"/>

    <property name="SceneJS._LATEST_MIN_JS_NAME" value="scenejs-latest.min.js"/>
    <property name="EXTRACTED_DIST_DIR" location="${DIST_CONTAINER_DIR}/extracted/${SceneJS._NAME}"/>


    <path id="yuicompressor.classpath">
        <fileset dir="${LIB_DIR}">
            <include name="**/yuicompressor-2.4.2.jar"/>
            <include name="**/YUIAnt.jar"/>

        </fileset>
    </path>

    <path id="sourcefiles">
        <fileset dir="${basedir}" includes="resources/license_intro.txt"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/core/core.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/node.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/state.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/service.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/nodeSelector.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/services/commandService.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/debug/debugModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/exceptions/exceptions.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/core/math.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/webgl.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/core/webgl-trace.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/events/eventsModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/compile/compileCfg.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/compile/compileModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/logging/loggingModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/errors/errorsModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/layers/layer.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/library/library.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/scene/scene.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/drawList/pickBuffer.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/drawList/drawList.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/drawList/nodeRenderer.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/renderer/renderer.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/flags/flagsModule.js"/>
        
        <fileset dir="${SRC_DIR}" includes="scenejs/tag/tagModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/load-status/loadStatusModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/geometry.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/objects/teapot.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/objects/box.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/objects/sphere.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/objects/quad.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/geometry/objects/disk.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/text/vectorTextModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/text/bitmapTextModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/text/text.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/modelTransformModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/rotate.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/translate.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/scale.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/matrix.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/quaternion.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/viewTransformModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/lookAt.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/stationary.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/billboard.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/inverse.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/projectionModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/camera.js"/>

        <!-- Stripped down provisional modelling matrix -->
        <fileset dir="${SRC_DIR}" includes="scenejs/transformation/xform.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/lighting/light.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/material/material.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/colortrans/colortrans.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/texture/texture.js"/>        
        <fileset dir="${SRC_DIR}" includes="scenejs/clip/clip.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/morphGeometry/morphGeometry.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/pick/pickingModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/name/nameModule.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/layer/layer.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/layer/layerModule.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/video/video.js"/>
        
        <fileset dir="${SRC_DIR}" includes="scenejs/imageBuf/imageBuf.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/shader/shader.js"/>
        <fileset dir="${SRC_DIR}" includes="scenejs/shader/shaderParams.js"/>

        <fileset dir="${SRC_DIR}" includes="scenejs/node-events/nodeEventsModule.js"/>
    </path>

    <target name="all" depends="archive"/>


    <target name="archive" depends="package">
        <tar destfile="${DIST_CONTAINER_DIR}/${SceneJS._NAME}.tar.gz"
             basedir="${DIST_CONTAINER_DIR}/extracted"
             compression="gzip"/>

        <zip destfile="${DIST_CONTAINER_DIR}/${SceneJS._NAME}.zip" basedir="${DIST_CONTAINER_DIR}/extracted"/>

    </target>

    <!-- Create compressed javascript lib -->

    <target name="package"
            depends="package-lib,  package-index, package-examples">
    </target>

    <target name="package-lib"
            depends="assemble-libs">


        <!-- Compress JS file list -->

        <mkdir dir="${EXTRACTED_DIST_DIR}/temp"/>
        <taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
            <classpath>
                <path refid="yuicompressor.classpath"/>
            </classpath>
        </taskdef>
        <yuicompress linebreak="300" warn="false" munge="no" preserveallsemicolons="true"
                     outputfolder="${EXTRACTED_DIST_DIR}/temp">
            <fileset dir="${EXTRACTED_DIST_DIR}/lib/">
                <include name="${EXTRACTED_DIST_DIR}/lib/${SceneJS._JS_NAME}"/>
            </fileset>
        </yuicompress>
        <concat fixlastline="yes" destfile="${EXTRACTED_DIST_DIR}/lib/${SceneJS._MIN_JS_NAME}">
            <path id="sourcefiles">
                <fileset dir="${basedir}" includes="resources/license_intro.txt"/>
                <fileset dir="${EXTRACTED_DIST_DIR}/temp/" includes="${SceneJS._JS_NAME}"/>
            </path>
        </concat>

        <!-- Delete temp file -->

        <delete includeemptydirs="true">
            <fileset dir="${EXTRACTED_DIST_DIR}/temp/" includes="**" defaultexcludes="false"/>
        </delete>
    </target>

    <target name="assemble-libs" depends="create-dist-directories">
        <concat fixlastline="yes" destfile="${EXTRACTED_DIST_DIR}/lib/${SceneJS._JS_NAME}">
            <path refid="sourcefiles"/>
        </concat>
    </target>

    <target name="package-index">
        <echo file="resources/version.txt" append="false">V${BUILD_MAJOR}.${BUILD_MINOR}.${BUILD_ID}.${PATCH_ID}
        </echo>
        <concat fixlastline="yes" destfile="${EXTRACTED_DIST_DIR}/examples/index.html">
            <filelist dir="."
                      files="${basedir}/resources/example-index-p1.html, ${basedir}/resources/version.txt, ${basedir}/resources/example-index-p2.html"/>
        </concat>

    </target>

    <target name="package-examples" depends="package-lib, package-index">
        <mkdir dir="${EXTRACTED_DIST_DIR}/examples/web"/>
        <copy todir="${EXTRACTED_DIST_DIR}/examples/web">
            <fileset dir="${basedir}/resources/web"/>
        </copy>

        <copy todir="${EXTRACTED_DIST_DIR}/examples">
            <fileset dir="${SRC_DIR}/examples"/>
        </copy>
    </target>

    <target name="clean-dist-directory" if="CLEAN_DIST">
        <mkdir dir="${DIST_CONTAINER_DIR}"></mkdir>
        <delete includeemptydirs="true">
            <fileset dir="${DIST_CONTAINER_DIR}" includes="**" defaultexcludes="false"/>
        </delete>
    </target>

    <target name="create-dist-directories">
        <mkdir dir="${DIST_CONTAINER_DIR}"></mkdir>
        <antcall target="clean-dist-directory"/>
        <mkdir dir="${EXTRACTED_DIST_DIR}"/>
        <mkdir dir="${EXTRACTED_DIST_DIR}/lib"/>
         <mkdir dir="${EXTRACTED_DIST_DIR}/examples"/>
    </target>

</project>

